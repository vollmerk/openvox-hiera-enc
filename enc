#!/usr/bin/env ruby
#
# Copyright 2014 Peter van Zetten
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'hiera'
require 'yaml'

class ::Hash
  def merge_deep(second)
    merger = proc { |_, v1, v2| Hash === v1 && Hash === v2 ? v1.merge(v2, &merger) : Array === v1 && Array === v2 ? v1 | v2 : [:undefined, nil, :nil].include?(v2) ? v1 : v2 }
    merge(second.to_h, &merger)
  end
end

## Itterative role gathering
def gather_roles(source_role)
  scope = { 'clientcert' => ARGV[0], 'role' => source_role, 'domain' => $domain }
  roles = $hiera.lookup('roles',nil,scope)
  ## Note that we've loaded "this" role
  $final_roles['loaded'][source_role] = true
  current_roles = { 'true'=> { source_role=>true }}
  results = { 'true'=>{},'false'=>{}}
  if roles
    roles.each do |role,enabled|
      if enabled
        current_roles['true'][role] = true
      else
        current_roles['false'][role] = true
      end
    end
    ## Itterate over the "True" roles that we want to load, and remove any that have been falsed
    # somewhere, this potentialy makes sense as a distinct def, but for now it will be duplicated in code
    current_roles['true'].each do |role,enabled|
      if current_roles['false'][role]
        current_roles['true'].delete(role)
      elsif !$final_roles['loaded'].has_key?(role)
        value = gather_roles(role)
        results = results.merge(value)
      end
    end
  end
  results['true'] = results['true'].merge(current_roles['true'])
  return results
end

# Query scope
/^[^\.]+\.(.+)$/ =~ ARGV[0]
$domain = $1 
scope = { 'clientcert' => ARGV[0], 'role' => '', 'domain' => $domain}
lookup_values = ['environment', 'parameters', 'classes']
hiera_results = { 'environment'=>'','parameters'=>{},'classes'=>[]}
results_roles = { 'false'=>{},'true'=>{}}
# We need this to be global, so that we can check and see what's already been loaded once
$final_roles = {'loaded'=>{},'true'=>{},'false'=>{}}

## Lookup the non-role information
scope = { 'clientcert' => ARGV[0], 'roles' => nil, 'domain' => $domain }
$hiera = Hiera.new(:config => '/etc/openvox/hiera-enc/host-hiera.yaml')
lookup_values.each do |value| 
  hiera_value = $hiera.lookup(value,nil,scope)
  if hiera_value
    hiera_results[value] = hiera_value
  end
end

## Lookup based on Role(s) recursively first
full_roles = Array.new
roles = $hiera.lookup('roles',nil,scope)
$hiera = Hiera.new(:config => '/etc/openvox/hiera-enc/role-hiera.yaml')
if roles
  # Switch to the Role Hiera at this point, we're done looking at host data
  roles.each do |role,enabled|
    if enabled
      if $final_roles['loaded'].has_key?(role)
      else
       values = gather_roles(role)
       results_roles = results_roles.merge_deep(gather_roles(role))
      end
    end
  end
  ## Itterate over the roles one last time and nuke any that have been false'd at any point
  ## during the role loading
  results_roles['false'].each do |role,enabled| 
    results_roles['true'].delete(role) 
  end
  ## Once we have all of the roles, for everything, and combine
  results_roles['true'].each do |role,enabled|
    full_roles.push(role)
    scope = { 'clientcert' => ARGV[0], 'role' => role, 'domain' => $domain }
    lookup_values.each do |value|
      hiera_value = $hiera.lookup(value, nil, scope)
      if hiera_value
	if value == 'environment'
	  hiera_results[value] = hiera_value
        elsif value == 'classes'
          hiera_results[value] = hiera_results[value] + hiera_value
        elsif value == 'parameters'
          hiera_results[value] = hiera_results[value].merge_deep(hiera_value)
        end
      end
    end
  end
end

## Add the full list of roles to the parameters as enc_roles: []
hiera_results['parameters']['enc_roles'] = full_roles
puts hiera_results.to_yaml
